## Manage what image of each examples to run
##
## Default:
##   make deploy-xdp
##     quay.io/bpfman-bytecode/go-xdp-counter:latest
##     quay.io/bpfman-userspace/go-xdp-counter:latest
##
## Example: Override the upstream tag
##   make deploy-tc TAG=v0.1.0
##     quay.io/bpfman-bytecode/go-tc-counter:v0.1.0
##     quay.io/bpfman-userspace/go-uc-counter:v0.1.0
##
## Example: Run from private image
##   make deploy-tracepoint IMAGE_TP_US=docker.io/user1/tracepoint-userspace:test \
##                          IMAGE_TP_BC=docker.io/user1/tracepoint-bytecode:test
##     docker.io/user1/tracepoint-bytecode:test
##     docker.io/user1/tracepoint-userspace:test
##
## Example: Override the upstream tag on all images
##   make deploy TAG=v0.1.0
##     quay.io/bpfman-bytecode/go-tc-counter:v0.1.0
##     quay.io/bpfman-userspace/go-uc-counter:v0.1.0
##     quay.io/bpfman-bytecode/go-tracepoint-counter:v0.1.0
##     quay.io/bpfman-userspace/go-tracepoint-counter:v0.1.0
##     quay.io/bpfman-bytecode/go-xdp-counter:v0.1.0
##     quay.io/bpfman-userspace/go-xdp-counter:v0.1.0
##

.DEFAULT_GOAL := help

# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)
ifeq (,$(shell go env GOBIN))
GOBIN=$(shell go env GOPATH)/bin
else
GOBIN=$(shell go env GOBIN)
endif

# Setting SHELL to bash allows bash commands to be executed by recipes.
# Options are set to exit when a recipe line exits non-zero or a piped command fails.
SHELL = /usr/bin/env bash -o pipefail
.SHELLFLAGS = -ec

.PHONY: all
all: build

##@ General

# The help target prints out all targets with their descriptions organized
# beneath their categories. The categories are represented by '##@' and the
# target descriptions by '##'. The awk commands is responsible for reading the
# entire set of makefiles included in this invocation, looking for lines of the
# file as xyz: ## something, and then pretty-format the target and help. Then,
# if there's a line with ##@ something, that gets pretty-printed as a category.
# More info on the usage of ANSI control characters for terminal formatting:
# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters
# More info on the awk command:
# http://linuxcommand.org/lc3_adv_awk.php

.PHONY: help
help: ## Display this help.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n  make \033[36mdeploy\033[0m TAG=v0.2.0\n  make \033[36mdeploy-xdp\033[0m IMAGE_XDP_US=quay.io/user1/go-xdp-counter-userspace:test\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Local Dependencies
ignore-not-found ?= false

## Location to install dependencies to
LOCALBIN ?= $(shell pwd)/bin
$(LOCALBIN):
	mkdir -p $(LOCALBIN)

## Tool Binaries
KUSTOMIZE ?= $(LOCALBIN)/kustomize

## Tool Versions
KUSTOMIZE_VERSION ?= v3.8.7

KUSTOMIZE_INSTALL_SCRIPT ?= "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
.PHONY: kustomize
kustomize: $(KUSTOMIZE) ## Download kustomize locally if necessary.
$(KUSTOMIZE): $(LOCALBIN)
	test -s $(LOCALBIN)/kustomize || { curl -Ss $(KUSTOMIZE_INSTALL_SCRIPT) | bash -s -- $(subst v,,$(KUSTOMIZE_VERSION)) $(LOCALBIN); }

GOARCH ?= $(shell go env GOHOSTARCH)
PLATFORM ?= $(shell go env GOHOSTOS)/$(shell go env GOHOSTARCH)

##@ Development

.PHONY: fmt
fmt: ## Run go fmt against code.
	go fmt ./...

.PHONY: verify
verify: ## Verify all the autogenerated code
	./hack/verify-codegen.sh

##@ Build

.PHONY: build
build: fmt ## Build all the userspace example code.
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-tc-counter/go-tc-counter go-tc-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-tracepoint-counter/go-tracepoint-counter go-tracepoint-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-xdp-counter/go-xdp-counter go-xdp-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-kprobe-counter/go-kprobe-counter go-kprobe-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-uprobe-counter/go-uprobe-counter go-uprobe-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-uretprobe-counter/go-uretprobe-counter go-uretprobe-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-target/go-target go-target/main.go

.PHONY: generate
generate: ## Run `go generate` to build the bytecode for each of the examples.
	go generate ./...

.PHONY: build-us-images
build-us-images: build ## Build all example userspace images
	docker buildx build -t ${IMAGE_TC_US} --platform ${PLATFORM} --load -f ./go-tc-counter/container-deployment/Containerfile.go-tc-counter ../
	docker buildx build -t ${IMAGE_TP_US} --platform ${PLATFORM} --load -f ./go-tracepoint-counter/container-deployment/Containerfile.go-tracepoint-counter ../
	docker buildx build -t ${IMAGE_XDP_US} --platform ${PLATFORM} --load -f ./go-xdp-counter/container-deployment/Containerfile.go-xdp-counter ../
	docker buildx build -t ${IMAGE_KP_US} --platform ${PLATFORM} --load -f ./go-kprobe-counter/container-deployment/Containerfile.go-kprobe-counter ../
	docker buildx build -t ${IMAGE_UP_US} --platform ${PLATFORM} --load -f ./go-uprobe-counter/container-deployment/Containerfile.go-uprobe-counter ../
	docker buildx build -t ${IMAGE_URP_US} --platform ${PLATFORM} --load -f ./go-uretprobe-counter/container-deployment/Containerfile.go-uretprobe-counter ../
	docker buildx build -t ${IMAGE_GT_US} --platform ${PLATFORM} --load -f ./go-target/container-deployment/Containerfile.go-target ../

.PHONY: build-bc-images
build-bc-images: generate ## Build bytecode example userspace images
	IMAGE_TC_BC=${IMAGE_TC_BC} IMAGE_TP_BC=${IMAGE_TP_BC} IMAGE_XDP_BC=${IMAGE_XDP_BC} IMAGE_KP_BC=${IMAGE_KP_BC} IMAGE_UP_BC=${IMAGE_UP_BC}  IMAGE_URP_BC=${IMAGE_URP_BC} ./build-bytecode-images.sh

build-all-images: build-bc-images build-us-images ## Build both bytecode and userspace images

.PHONY: push-us-images
push-us-images: ## Push all example userspace images
	docker push ${IMAGE_TC_US}
	docker push ${IMAGE_TP_US}
	docker push ${IMAGE_XDP_US}
	docker push ${IMAGE_KP_US}
	docker push ${IMAGE_UP_US}
	docker push ${IMAGE_URP_US}
	docker push ${IMAGE_GT_US}

.PHONY: push-bc-images
push-bc-images: ## Push all example bytecode images
	docker push ${IMAGE_TC_BC}
	docker push ${IMAGE_TP_BC}
	docker push ${IMAGE_XDP_BC}
	docker push ${IMAGE_KP_BC}
	docker push ${IMAGE_UP_BC}
	docker push ${IMAGE_URP_BC}


.PHONY: load-us-images-kind
load-us-images-kind: build-us-images ## Build and load all example userspace images into kind
	kind load docker-image ${IMAGE_TC_US} ${IMAGE_TP_US} ${IMAGE_XDP_US} ${IMAGE_KP_US} ${IMAGE_UP_US} ${IMAGE_GT_US} --name ${KIND_CLUSTER_NAME}

##@ Deployment Variables (not commands)
TAG: ## Used to set all images to a fixed tag. Example: make deploy TAG=v0.2.0
IMAGE_TC_BC: ## TC Bytecode image. Example: make deploy-tc IMAGE_TC_BC=quay.io/user1/go-tc-counter-bytecode:test
IMAGE_TC_US: ## TC Userspace image. Example: make deploy-tc IMAGE_TC_US=quay.io/user1/go-tc-counter-userspace:test
IMAGE_TP_BC: ## Tracepoint Bytecode image. Example: make deploy-tracepoint IMAGE_TP_BC=quay.io/user1/go-tracepoint-counter-bytecode:test
IMAGE_TP_US: ## Tracepoint Userspace image. Example: make deploy-tracepoint IMAGE_TP_US=quay.io/user1/go-tracepoint-counter-userspace:test
IMAGE_XDP_BC: ## XDP Bytecode image. Example: make deploy-xdp IMAGE_XDP_BC=quay.io/user1/go-xdp-counter-bytecode:test
IMAGE_XDP_US: ## XDP Userspace image. Example: make deploy-xdp IMAGE_XDP_US=quay.io/user1/go-xdp-counter-userspace:test
IMAGE_KP_BC: ## Kprobe Bytecode image. Example: make deploy-kprobe IMAGE_KP_BC=quay.io/user1/go-kprobe-counter-bytecode:test
IMAGE_KP_US: ## Kprobe Userspace image. Example: make deploy-kprobe IMAGE_KP_US=quay.io/user1/go-kprobe-counter-userspace:test
IMAGE_UP_BC: ## Uprobe Bytecode image. Example: make deploy-uprobe IMAGE_UP_BC=quay.io/user1/go-uprobe-counter-bytecode:test
IMAGE_UP_US: ## Uprobe Userspace image. Example: make deploy-uprobe IMAGE_UP_US=quay.io/user1/go-uprobe-counter-userspace:test
IMAGE_URP_BC: ## URetprobe Userspace image. Example: make deploy-uretprobe IMAGE_URP_BC=quay.io/user1/go-uretprobe-counter-bytecode:test
IMAGE_URP_US: ## URetprobe Userspace image. Example: make deploy-uretprobe IMAGE_URP_US=quay.io/user1/go-uretprobe-counter-userspace:test
IMAGE_GT_US: ## Uprobe Userspace target. Example: make deploy-target IMAGE_GT_US=quay.io/user1/go-target-userspace:test
KIND_CLUSTER_NAME: ## Name of the deployed cluster to load example images to, defaults to `bpfman-deployment`
ignore-not-found: ## For any undeploy command, set to true to ignore resource not found errors during deletion. Example: make undeploy ignore-not-found=true

##@ Deployment
IMAGE_TC_BC ?= quay.io/bpfman-bytecode/go-tc-counter:latest
IMAGE_TC_US ?= quay.io/bpfman-userspace/go-tc-counter:latest
IMAGE_TP_BC ?= quay.io/bpfman-bytecode/go-tracepoint-counter:latest
IMAGE_TP_US ?= quay.io/bpfman-userspace/go-tracepoint-counter:latest
IMAGE_XDP_BC ?= quay.io/bpfman-bytecode/go-xdp-counter:latest
IMAGE_XDP_US ?= quay.io/bpfman-userspace/go-xdp-counter:latest
IMAGE_KP_BC ?= quay.io/bpfman-bytecode/go-kprobe-counter:latest
IMAGE_KP_US ?= quay.io/bpfman-userspace/go-kprobe-counter:latest
IMAGE_UP_BC ?= quay.io/bpfman-bytecode/go-uprobe-counter:latest
IMAGE_UP_US ?= quay.io/bpfman-userspace/go-uprobe-counter:latest
IMAGE_URP_BC ?= quay.io/bpfman-bytecode/go-uretprobe-counter:latest
IMAGE_URP_US ?= quay.io/bpfman-userspace/go-uretprobe-counter:latest
IMAGE_GT_US ?= quay.io/bpfman-userspace/go-target:latest
KIND_CLUSTER_NAME ?= bpfman-deployment


.PHONY: deploy-prog
deploy-prog: kustomize
ifndef TAG
	sed 's@URL_BC@$(IMAGE_BC)@' config/$(CONFIG_DIR)/patch.yaml.env > config/$(CONFIG_DIR)/patch.yaml
	cd config/$(CONFIG_DIR) && $(KUSTOMIZE) edit set image quay.io/bpfman-userspace/$(PROG_NAME)=${IMAGE_US}
else
	$(eval KUST_DIR=$(TAG))
endif
	@if [ -f config/$(CONFIG_DIR)/kustomization.yaml ]; then \
		$(KUSTOMIZE) build config/$(CONFIG_DIR) | kubectl apply -f - ; \
	else \
		echo "Manifests $(CONFIG_DIR) do not exist for program $(PROG_NAME)" ; \
		exit 1 ; \
	fi


.PHONY: undeploy-prog
undeploy-prog:
ifndef TAG
	sed 's@URL_BC@$(IMAGE_BC)@' config/$(CONFIG_DIR)/patch.yaml.env > config/$(CONFIG_DIR)/patch.yaml
	cd config/$(CONFIG_DIR) && $(KUSTOMIZE) edit set image quay.io/bpfman-userspace/$(PROG_NAME)=${IMAGE_US}
else
	$(eval CONFIG_DIR=$(TAG))
endif
	@if [ -f config/$(CONFIG_DIR)/kustomization.yaml ]; then \
		$(KUSTOMIZE) build config/$(CONFIG_DIR) | kubectl delete --ignore-not-found=$(ignore-not-found) -f -; \
	else \
		echo "Manifests $(CONFIG_DIR) does not exist for program $(PROG_NAME)" ; \
		exit 1 ; \
	fi

.PHONY: deploy-tc
deploy-tc: PROG_NAME=go-tc-counter
deploy-tc: CONFIG_DIR=default/$(PROG_NAME)
deploy-tc: IMAGE_BC=$(IMAGE_TC_BC)
deploy-tc: IMAGE_US=$(IMAGE_TC_US)
deploy-tc: deploy-prog ## Deploy go-tc-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-tc
undeploy-tc: PROG_NAME=go-tc-counter
undeploy-tc: CONFIG_DIR=default/$(PROG_NAME)
undeploy-tc: IMAGE_BC=$(IMAGE_TC_BC)
undeploy-tc: IMAGE_US=$(IMAGE_TC_US)
undeploy-tc: undeploy-prog ## Undeploy go-tc-counter from the cluster specified in ~/.kube/config.


.PHONY: deploy-tracepoint
deploy-tracepoint: PROG_NAME=go-tracepoint-counter
deploy-tracepoint: CONFIG_DIR=default/$(PROG_NAME)
deploy-tracepoint: IMAGE_BC=$(IMAGE_TP_BC)
deploy-tracepoint: IMAGE_US=$(IMAGE_TP_US)
deploy-tracepoint: deploy-prog ## Deploy go-tracepoint-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-tracepoint
undeploy-tracepoint: PROG_NAME=go-tracepoint-counter
undeploy-tracepoint: CONFIG_DIR=default/$(PROG_NAME)
undeploy-tracepoint: IMAGE_BC=$(IMAGE_TP_BC)
undeploy-tracepoint: IMAGE_US=$(IMAGE_TP_US)
undeploy-tracepoint: undeploy-prog ## Undeploy go-tracepoint-counter from the cluster specified in ~/.kube/config.


.PHONY: deploy-xdp
deploy-xdp: PROG_NAME=go-xdp-counter
deploy-xdp: CONFIG_DIR=default/$(PROG_NAME)
deploy-xdp: IMAGE_BC=$(IMAGE_XDP_BC)
deploy-xdp: IMAGE_US=$(IMAGE_XDP_US)
deploy-xdp: deploy-prog ## Deploy go-xdp-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-xdp
undeploy-xdp: PROG_NAME=go-xdp-counter
undeploy-xdp: CONFIG_DIR=default/$(PROG_NAME)
undeploy-xdp: IMAGE_BC=$(IMAGE_XDP_BC)
undeploy-xdp: IMAGE_US=$(IMAGE_XDP_US)
undeploy-xdp: undeploy-prog ## Undeploy go-xdp-counter from the cluster specified in ~/.kube/config.


.PHONY: deploy-xdp-ms
deploy-xdp-ms: PROG_NAME=go-xdp-counter
deploy-xdp-ms: CONFIG_DIR=default/go-xdp-counter-sharing-map
deploy-xdp-ms: IMAGE_BC=$(IMAGE_XDP_BC)
deploy-xdp-ms: IMAGE_US=$(IMAGE_XDP_US)
deploy-xdp-ms: deploy-prog ## Deploy go-xdp-counter-sharing-map (shares map with go-xdp-counter) to the cluster specified in ~/.kube/config.

.PHONY: undeploy-xdp-ms
undeploy-xdp-ms: PROG_NAME=go-xdp-counter
undeploy-xdp-ms: CONFIG_DIR=default/go-xdp-counter-sharing-map
undeploy-xdp-ms: IMAGE_BC=$(IMAGE_XDP_BC)
undeploy-xdp-ms: IMAGE_US=$(IMAGE_XDP_US)
undeploy-xdp-ms: undeploy-prog ## Undeploy go-xdp-counter-sharing-map from the cluster specified in ~/.kube/config.


.PHONY: deploy-kprobe
deploy-kprobe: PROG_NAME=go-kprobe-counter
deploy-kprobe: CONFIG_DIR=default/$(PROG_NAME)
deploy-kprobe: IMAGE_BC=$(IMAGE_KP_BC)
deploy-kprobe: IMAGE_US=$(IMAGE_KP_US)
deploy-kprobe: deploy-prog ## Deploy go-kprobe-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-kprobe
undeploy-kprobe: PROG_NAME=go-kprobe-counter
undeploy-kprobe: CONFIG_DIR=default/$(PROG_NAME)
undeploy-kprobe: IMAGE_BC=$(IMAGE_KP_BC)
undeploy-kprobe: IMAGE_US=$(IMAGE_KP_US)
undeploy-kprobe: undeploy-prog ## Undeploy go-kprobe-counter from the cluster specified in ~/.kube/config.


.PHONY: deploy-uprobe
deploy-uprobe: PROG_NAME=go-uprobe-counter
deploy-uprobe: CONFIG_DIR=default/$(PROG_NAME)
deploy-uprobe: IMAGE_BC=$(IMAGE_UP_BC)
deploy-uprobe: IMAGE_US=$(IMAGE_UP_US)
deploy-uprobe: deploy-prog ## Deploy go-uprobe-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-uprobe
undeploy-uprobe: PROG_NAME=go-uprobe-counter
undeploy-uprobe: CONFIG_DIR=default/$(PROG_NAME)
undeploy-uprobe: IMAGE_BC=$(IMAGE_UP_BC)
undeploy-uprobe: IMAGE_US=$(IMAGE_UP_US)
undeploy-uprobe: undeploy-prog ## Undeploy go-uprobe-counter from the cluster specified in ~/.kube/config.

.PHONY: deploy-uretprobe
deploy-uretprobe: PROG_NAME=go-uretprobe-counter
deploy-uretprobe: CONFIG_DIR=default/$(PROG_NAME)
deploy-uretprobe: IMAGE_BC=$(IMAGE_URP_BC)
deploy-uretprobe: IMAGE_US=$(IMAGE_URP_US)
deploy-uretprobe: deploy-prog ## Deploy go-uretprobe-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-uretprobe
undeploy-uretprobe: PROG_NAME=go-uretprobe-counter
undeploy-uretprobe: CONFIG_DIR=default/$(PROG_NAME)
undeploy-uretprobe: IMAGE_BC=$(IMAGE_URP_BC)
undeploy-uretprobe: IMAGE_US=$(IMAGE_URP_US)
undeploy-uretprobe: undeploy-prog ## Undeploy go-uretprobe-counter from the cluster specified in ~/.kube/config.

.PHONY: deploy-tc-selinux
deploy-tc-selinux: PROG_NAME=go-tc-counter
deploy-tc-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
deploy-tc-selinux: IMAGE_BC=$(IMAGE_TC_BC)
deploy-tc-selinux: IMAGE_US=$(IMAGE_TC_US)
deploy-tc-selinux: deploy-prog ## Deploy go-tc-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-tc-selinux
undeploy-tc-selinux: PROG_NAME=go-tc-counter
undeploy-tc-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
undeploy-tc-selinux: IMAGE_BC=$(IMAGE_TC_BC)
undeploy-tc-selinux: IMAGE_US=$(IMAGE_TC_US)
undeploy-tc-selinux: undeploy-prog ## Undeploy go-tc-counter from the cluster specified in ~/.kube/config.


.PHONY: deploy-tracepoint-selinux
deploy-tracepoint-selinux: PROG_NAME=go-tracepoint-counter
deploy-tracepoint-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
deploy-tracepoint-selinux: IMAGE_BC=$(IMAGE_TP_BC)
deploy-tracepoint-selinux: IMAGE_US=$(IMAGE_TP_US)
deploy-tracepoint-selinux: deploy-prog ## Deploy go-tracepoint-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-tracepoint-selinux
undeploy-tracepoint-selinux: PROG_NAME=go-tracepoint-counter
undeploy-tracepoint-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
undeploy-tracepoint-selinux: IMAGE_BC=$(IMAGE_TP_BC)
undeploy-tracepoint-selinux: IMAGE_US=$(IMAGE_TP_US)
undeploy-tracepoint-selinux: undeploy-prog ## Undeploy go-tracepoint-counter from the cluster specified in ~/.kube/config.


.PHONY: deploy-xdp-selinux
deploy-xdp-selinux: PROG_NAME=go-xdp-counter
deploy-xdp-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
deploy-xdp-selinux: IMAGE_BC=$(IMAGE_XDP_BC)
deploy-xdp-selinux: IMAGE_US=$(IMAGE_XDP_US)
deploy-xdp-selinux: deploy-prog ## Deploy go-xdp-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-xdp-selinux
undeploy-xdp-selinux: PROG_NAME=go-xdp-counter
undeploy-xdp-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
undeploy-xdp-selinux: IMAGE_BC=$(IMAGE_XDP_BC)
undeploy-xdp-selinux: IMAGE_US=$(IMAGE_XDP_US)
undeploy-xdp-selinux: undeploy-prog ## Undeploy go-xdp-counter from the cluster specified in ~/.kube/config.


.PHONY: deploy-xdp-ms-selinux
deploy-xdp-ms-selinux: PROG_NAME=go-xdp-counter
deploy-xdp-ms-selinux: CONFIG_DIR=selinux/go-xdp-counter-sharing-map
deploy-xdp-ms-selinux: IMAGE_BC=$(IMAGE_XDP_BC)
deploy-xdp-ms-selinux: IMAGE_US=$(IMAGE_XDP_US)
deploy-xdp-ms-selinux: deploy-prog ## Deploy go-xdp-counter-sharing-map (shares map with go-xdp-counter) to the cluster specified in ~/.kube/config.

.PHONY: undeploy-xdp-ms-selinux
undeploy-xdp-ms-selinux: PROG_NAME=go-xdp-counter
undeploy-xdp-ms-selinux: CONFIG_DIR=selinux/go-xdp-counter-sharing-map
undeploy-xdp-ms-selinux: IMAGE_BC=$(IMAGE_XDP_BC)
undeploy-xdp-ms-selinux: IMAGE_US=$(IMAGE_XDP_US)
undeploy-xdp-ms-selinux: undeploy-prog ## Undeploy go-xdp-counter-sharing-map from the cluster specified in ~/.kube/config.


.PHONY: deploy-kprobe-selinux
deploy-kprobe-selinux: PROG_NAME=go-kprobe-counter
deploy-kprobe-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
deploy-kprobe-selinux: IMAGE_BC=$(IMAGE_KP_BC)
deploy-kprobe-selinux: IMAGE_US=$(IMAGE_KP_US)
deploy-kprobe-selinux: deploy-prog ## Deploy go-kprobe-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-kprobe-selinux
undeploy-kprobe-selinux: PROG_NAME=go-kprobe-counter
undeploy-kprobe-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
undeploy-kprobe-selinux: IMAGE_BC=$(IMAGE_KP_BC)
undeploy-kprobe-selinux: IMAGE_US=$(IMAGE_KP_US)
undeploy-kprobe-selinux: undeploy-prog ## Undeploy go-kprobe-counter from the cluster specified in ~/.kube/config.


.PHONY: deploy-uprobe-selinux
deploy-uprobe-selinux: PROG_NAME=go-uprobe-counter
deploy-uprobe-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
deploy-uprobe-selinux: IMAGE_BC=$(IMAGE_UP_BC)
deploy-uprobe-selinux: IMAGE_US=$(IMAGE_UP_US)
deploy-uprobe-selinux: deploy-prog ## Deploy go-uprobe-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-uprobe-selinux
undeploy-uprobe-selinux: PROG_NAME=go-uprobe-counter
undeploy-uprobe-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
undeploy-uprobe-selinux: IMAGE_BC=$(IMAGE_UP_BC)
undeploy-uprobe-selinux: IMAGE_US=$(IMAGE_UP_US)
undeploy-uprobe-selinux: undeploy-prog ## Undeploy go-uprobe-counter from the cluster specified in ~/.kube/config.

.PHONY: deploy-uretprobe-selinux
deploy-uretprobe-selinux: PROG_NAME=go-uretprobe-counter
deploy-uretprobe-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
deploy-uretprobe-selinux: IMAGE_BC=$(IMAGE_URP_BC)
deploy-uretprobe-selinux: IMAGE_US=$(IMAGE_URP_US)
deploy-uretprobe-selinux: deploy-prog ## Deploy go-uretprobe-counter to the cluster specified in ~/.kube/config.

.PHONY: undeploy-uretprobe-selinux
undeploy-uretprobe-selinux: PROG_NAME=go-uretprobe-counter
undeploy-uretprobe-selinux: CONFIG_DIR=selinux/$(PROG_NAME)
undeploy-uretprobe-selinux: IMAGE_BC=$(IMAGE_URP_BC)
undeploy-uretprobe-selinux: IMAGE_US=$(IMAGE_URP_US)
undeploy-uretprobe-selinux: undeploy-prog ## Undeploy go-uretprobe-counter from the cluster specified in ~/.kube/config.

.PHONY: deploy-target
deploy-target: ## Deploy go-target to the cluster specified in ~/.kube/config.
	kubectl apply -f config/base/go-target/deployment.yaml

.PHONY: undeploy-target
undeploy-target: ## Undeploy go-target from the cluster specified in ~/.kube/config.
	kubectl delete -f config/base/go-target/deployment.yaml

DEPLOY_TARGETS = deploy-tc deploy-tracepoint deploy-xdp deploy-xdp-ms deploy-kprobe deploy-target deploy-uprobe deploy-uretprobe

.PHONY: deploy
deploy: ## Deploy all examples to the cluster specified in ~/.kube/config.
ifdef TAG
	$(eval TAG_COMMAND="TAG=$(TAG)")
endif
	for target in $(DEPLOY_TARGETS) ; do \
		$(MAKE) $$target $(TAG_COMMAND) || true; \
	done

UNDEPLOY_TARGETS = undeploy-tc undeploy-tracepoint undeploy-xdp-ms undeploy-xdp undeploy-kprobe undeploy-uprobe undeploy-uretprobe undeploy-target

.PHONY: undeploy
undeploy: ## Undeploy all examples to the cluster specified in ~/.kube/config.
ifdef TAG
	$(eval TAG_COMMAND="TAG=$(TAG)")
endif
	for target in $(UNDEPLOY_TARGETS) ; do \
		$(MAKE) $$target $(TAG_COMMAND) || true; \
	done
